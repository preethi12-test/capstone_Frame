"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addDependencies = void 0;
const devkit_1 = require("@nx/devkit");
const versions_1 = require("../../../wdio/versions");
function addDependencies(tree, options) {
    const packagesToInstall = [];
    if (versions_1.packages.has(options.runner)) {
        packagesToInstall.push(versions_1.packages.get(options.runner));
    }
    if (versions_1.packages.has(options.framework)) {
        packagesToInstall.push(versions_1.packages.get(options.framework));
        if (options.framework === 'jasmine') {
            packagesToInstall.push(versions_1.packages.get('jasmine-types'));
        }
    }
    if (options.reporters) {
        for (const reporter of options.reporters) {
            if (versions_1.packages.has(reporter)) {
                packagesToInstall.push(versions_1.packages.get(reporter));
            }
        }
    }
    if (options.services) {
        for (const service of options.services) {
            if (versions_1.packages.has(service)) {
                packagesToInstall.push(versions_1.packages.get(service));
            }
        }
    }
    const devDependencies = {
        [versions_1.packages.get('cli')['name']]: versions_1.packages.get('cli')['version'],
        [versions_1.packages.get('globals')['name']]: versions_1.packages.get('globals')['version'],
        [versions_1.packages.get('types')['name']]: versions_1.packages.get('types')['version'],
        [versions_1.packages.get('ts-node')['name']]: versions_1.packages.get('ts-node')['version'],
    };
    packagesToInstall.forEach((pkg) => (devDependencies[pkg.name] = pkg.version));
    return (0, devkit_1.addDependenciesToPackageJson)(tree, {}, devDependencies);
}
exports.addDependencies = addDependencies;
//# sourceMappingURL=add-dependencies.js.map